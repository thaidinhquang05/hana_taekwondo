// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentManagement.Models;

#nullable disable

namespace StudentManagement.Migrations
{
    [DbContext(typeof(hana_taekwondoContext))]
    partial class hana_taekwondoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("StudentManagement.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("date");

                    b.Property<bool>("IsAttendance")
                        .HasColumnType("bit")
                        .HasColumnName("is_attendance");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.HasIndex("StudentId");

                    b.ToTable("attendance", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("Desc")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("desc");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime")
                        .HasColumnName("start_date");

                    b.HasKey("Id");

                    b.ToTable("class", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.ClassTimetable", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<int>("TimeTableId")
                        .HasColumnType("int")
                        .HasColumnName("time_table_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at");

                    b.HasKey("ClassId", "TimeTableId")
                        .HasName("class_time_table_pk");

                    b.HasIndex("TimeTableId");

                    b.ToTable("class_timetable", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Desc")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("desc");

                    b.HasKey("Id");

                    b.ToTable("slot", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.Spending", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Another")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("another");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Eating")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("eating");

                    b.Property<decimal>("Electric")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("electric");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime")
                        .HasColumnName("paid_date");

                    b.Property<decimal>("Rent")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("rent");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("salary");

                    b.Property<decimal>("Water")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("water");

                    b.HasKey("Id");

                    b.ToTable("spending", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("datetime")
                        .HasColumnName("dob");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("full_name");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit")
                        .HasColumnName("gender");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at");

                    b.Property<string>("ParentName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("parent_name");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("phone");

                    b.Property<string>("StudentImg")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("student_img");

                    b.HasKey("Id");

                    b.ToTable("student", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.StudentClass", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("ClassId")
                        .HasColumnType("int")
                        .HasColumnName("class_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at");

                    b.HasKey("StudentId", "ClassId")
                        .HasName("student_class_pk");

                    b.HasIndex("ClassId");

                    b.ToTable("student_class", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.StudentTimetable", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.Property<int>("TimeTableId")
                        .HasColumnType("int")
                        .HasColumnName("time_table_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at");

                    b.HasKey("StudentId", "TimeTableId")
                        .HasName("student_time_table_pk");

                    b.HasIndex("TimeTableId");

                    b.ToTable("student_timetable", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.Timetable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("SlotId")
                        .HasColumnType("int")
                        .HasColumnName("slot_id");

                    b.Property<string>("WeekDay")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("week_day");

                    b.HasKey("Id");

                    b.HasIndex("SlotId");

                    b.ToTable("timetable", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.Tuition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("ActualAmount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("actual_amount");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("amount");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime")
                        .HasColumnName("due_date");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("modified_at");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note");

                    b.Property<DateTime>("PaidDate")
                        .HasColumnType("datetime")
                        .HasColumnName("paid_date");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("student_id");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("tuition", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("UserName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("StudentManagement.Models.Attendance", b =>
                {
                    b.HasOne("StudentManagement.Models.Slot", "Slot")
                        .WithMany("Attendances")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("FK_attendance_slot");

                    b.HasOne("StudentManagement.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("attendance_student_id_fk");

                    b.Navigation("Slot");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagement.Models.ClassTimetable", b =>
                {
                    b.HasOne("StudentManagement.Models.Class", "Class")
                        .WithMany("ClassTimetables")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("class_time_table___fk_class");

                    b.HasOne("StudentManagement.Models.Timetable", "TimeTable")
                        .WithMany("ClassTimetables")
                        .HasForeignKey("TimeTableId")
                        .IsRequired()
                        .HasConstraintName("class_time_table___fk_time");

                    b.Navigation("Class");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("StudentManagement.Models.StudentClass", b =>
                {
                    b.HasOne("StudentManagement.Models.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("student_class___fk_class");

                    b.HasOne("StudentManagement.Models.Student", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("student_class___fk_student");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagement.Models.StudentTimetable", b =>
                {
                    b.HasOne("StudentManagement.Models.Student", "Student")
                        .WithMany("StudentTimetables")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("student_time_table___fk_student");

                    b.HasOne("StudentManagement.Models.Timetable", "TimeTable")
                        .WithMany("StudentTimetables")
                        .HasForeignKey("TimeTableId")
                        .IsRequired()
                        .HasConstraintName("student_time_table___fk_time");

                    b.Navigation("Student");

                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("StudentManagement.Models.Timetable", b =>
                {
                    b.HasOne("StudentManagement.Models.Slot", "Slot")
                        .WithMany("Timetables")
                        .HasForeignKey("SlotId")
                        .IsRequired()
                        .HasConstraintName("time_table_slot_id_fk");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("StudentManagement.Models.Tuition", b =>
                {
                    b.HasOne("StudentManagement.Models.Student", "Student")
                        .WithMany("Tuitions")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_tuition_student");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentManagement.Models.Class", b =>
                {
                    b.Navigation("ClassTimetables");

                    b.Navigation("StudentClasses");
                });

            modelBuilder.Entity("StudentManagement.Models.Slot", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Timetables");
                });

            modelBuilder.Entity("StudentManagement.Models.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentTimetables");

                    b.Navigation("Tuitions");
                });

            modelBuilder.Entity("StudentManagement.Models.Timetable", b =>
                {
                    b.Navigation("ClassTimetables");

                    b.Navigation("StudentTimetables");
                });
#pragma warning restore 612, 618
        }
    }
}
